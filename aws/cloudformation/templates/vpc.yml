AWSTemplateFormatVersion: 2010-09-09
Description: Test VPC Setup
Parameters:
  EC2KeyName:
    Description: Enter the name of the EC2 key pair for SSH access
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "cloudformation"
  EC2InstanceType:
    Description: Enter the type of the EC2 instance to use for web servers
    Type: String
    Default: "t2.micro"
  DBInstanceType:
    Description: Enter the type of the RDS instance to use for database servers
    Type: String
    Default: "db.t2.micro"
  DBName:
    Description: Enter the name of the database to create for the application
    Type: String
    Default: "app"
    MinLength: 1
  DBUser:
    Description: Enter the name of the user to create for the application
    Type: String
    Default: "app"
    MinLength: 1
  DBPass:
    Description: Enter the password of the user to create for the application
    Type: String
    Default: "app12345678"
    MinLength: 8
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: test
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: test
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  DefaultRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: test
  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref DefaultRouteTable
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "eu-west-1a"
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: test
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "eu-west-1b"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: test

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      SubnetId: !Ref Subnet1
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DefaultRouteTable
      SubnetId: !Ref Subnet2
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Test DB subnet group"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: name
          Value: test
  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 10
      AvailabilityZone: "eu-west-1a"
      Engine: "postgres"
      DBInstanceClass: !Ref DBInstanceType
      DBName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPass
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: test
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web access security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH access security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB access security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0

  WebServer1:
    Type: AWS::EC2::Instance
    DependsOn:
      - Subnet1
      - WebSecurityGroup
      - SSHSecurityGroup
      - DBSecurityGroup
      - RDSDB
    Properties:
      AvailabilityZone: "eu-west-1a"
      KeyName: !Ref EC2KeyName
      ImageId: "ami-0ff760d16d9497662"
      InstanceInitiatedShutdownBehavior: "stop"
      InstanceType: !Ref EC2InstanceType
      SubnetId: !Ref Subnet1
      SecurityGroupIds:
        - !Ref WebSecurityGroup
        - !Ref SSHSecurityGroup
        - !Ref DBSecurityGroup
      Tags:
        - Key: name
          Value: test
      UserData:
        Fn::Base64:
          !Sub
            - |
                #!/bin/bash -xe
                # Disable SELinux
                /sbin/setenforce 0
                # Install bare minimum
                /bin/yum install -y git ansible
                # Install the rest
                cd /root
                /bin/git clone https://github.com/mamchenkov/aws-example.git
                cd aws-example/ansible
                /bin/ansible-playbook base.yml --extra-vars "dbname=${DBName} dbhost=${DBHost} dbuser=${DBUser} dbpass=${DBPass}" > last.log 2> last.error.log
            - { DBHost: !GetAtt RDSDB.Endpoint.Address, DBName: !Ref DBName, DBUser: !Ref DBUser, DBPass: !Ref DBPass }
